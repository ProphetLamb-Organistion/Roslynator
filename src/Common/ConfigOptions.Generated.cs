// Copyright (c) Josef Pihrt and Contributors. Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

// <auto-generated>

using System.Collections.Generic;

namespace Roslynator
{
    public static partial class ConfigOptions
    {
        public static readonly ConfigOptionDescriptor AccessibilityModifiers = new(
            key:                     ConfigOptionKeys.AccessibilityModifiers, 
            defaultValue:            null, 
            defaultValuePlaceholder: "explicit|implicit", 
            description:             "Prefer explicit/implicit accessibility modifiers");

        public static readonly ConfigOptionDescriptor AnonymousFunctionOrMethodGroup = new(
            key:                     ConfigOptionKeys.AnonymousFunctionOrMethodGroup, 
            defaultValue:            null, 
            defaultValuePlaceholder: "anonymous_function|method_group", 
            description:             "Use anonymous function or method group");

        public static readonly ConfigOptionDescriptor ArrayCreationTypeStyle = new(
            key:                     ConfigOptionKeys.ArrayCreationTypeStyle, 
            defaultValue:            null, 
            defaultValuePlaceholder: "explicit|implicit|implicit_when_type_is_obvious", 
            description:             "Prefer explicitly/implicitly typed array");

        public static readonly ConfigOptionDescriptor ArrowTokenNewLine = new(
            key:                     ConfigOptionKeys.ArrowTokenNewLine, 
            defaultValue:            null, 
            defaultValuePlaceholder: "after|before", 
            description:             "Place new line after/before arrow token");

        public static readonly ConfigOptionDescriptor BinaryOperatorNewLine = new(
            key:                     ConfigOptionKeys.BinaryOperatorNewLine, 
            defaultValue:            null, 
            defaultValuePlaceholder: "after|before", 
            description:             "Place new line after/before binary operator");

        public static readonly ConfigOptionDescriptor BlankLineBetweenClosingBraceAndSwitchSection = new(
            key:                     ConfigOptionKeys.BlankLineBetweenClosingBraceAndSwitchSection, 
            defaultValue:            null, 
            defaultValuePlaceholder: "true|false", 
            description:             "Add/remove blank line between closing brace and switch section");

        public static readonly ConfigOptionDescriptor BlankLineBetweenSingleLineAccessors = new(
            key:                     ConfigOptionKeys.BlankLineBetweenSingleLineAccessors, 
            defaultValue:            null, 
            defaultValuePlaceholder: "true|false", 
            description:             "Add/remove blank line between single-line accessors");

        public static readonly ConfigOptionDescriptor BlankLineBetweenUsingDirectiveGroups = new(
            key:                     ConfigOptionKeys.BlankLineBetweenUsingDirectiveGroups, 
            defaultValue:            null, 
            defaultValuePlaceholder: "true|false", 
            description:             "Add/remove blank line between using directive groups");

        public static readonly ConfigOptionDescriptor BodyStyle = new(
            key:                     ConfigOptionKeys.BodyStyle, 
            defaultValue:            null, 
            defaultValuePlaceholder: "block|expression", 
            description:             "Prefer block body or expression body");

        public static readonly ConfigOptionDescriptor ConditionalOperatorNewLine = new(
            key:                     ConfigOptionKeys.ConditionalOperatorNewLine, 
            defaultValue:            null, 
            defaultValuePlaceholder: "after|before", 
            description:             "Place new line after/before '?:' operator");

        public static readonly ConfigOptionDescriptor ConditionInConditionalOperatorParenthesesStyle = new(
            key:                     ConfigOptionKeys.ConditionInConditionalOperatorParenthesesStyle, 
            defaultValue:            null, 
            defaultValuePlaceholder: "include|omit||omit_when_condition_is_single_token", 
            description:             "Add/remove parentheses to condition in conditional operator");

        public static readonly ConfigOptionDescriptor ConfigureAwait = new(
            key:                     ConfigOptionKeys.ConfigureAwait, 
            defaultValue:            null, 
            defaultValuePlaceholder: "true|false", 
            description:             "Add/remove 'ConfigureAwait(false)' call");

        public static readonly ConfigOptionDescriptor EmptyStringStyle = new(
            key:                     ConfigOptionKeys.EmptyStringStyle, 
            defaultValue:            null, 
            defaultValuePlaceholder: "field|literal", 
            description:             "Prefer 'string.Empty' or empty string literal");

        public static readonly ConfigOptionDescriptor EnumHasFlagStyle = new(
            key:                     ConfigOptionKeys.EnumHasFlagStyle, 
            defaultValue:            null, 
            defaultValuePlaceholder: "method|operator", 
            description:             "Use 'HasFlag' method or bitwise operator");

        public static readonly ConfigOptionDescriptor EqualsTokenNewLine = new(
            key:                     ConfigOptionKeys.EqualsTokenNewLine, 
            defaultValue:            null, 
            defaultValuePlaceholder: "after|before", 
            description:             "Place new line after/before equals sign");

        public static readonly ConfigOptionDescriptor MaxLineLength = new(
            key:                     ConfigOptionKeys.MaxLineLength, 
            defaultValue:            "140", 
            defaultValuePlaceholder: "<NUM>", 
            description:             "Max line length");

        public static readonly ConfigOptionDescriptor NewLineAtEndOfFile = new(
            key:                     ConfigOptionKeys.NewLineAtEndOfFile, 
            defaultValue:            null, 
            defaultValuePlaceholder: "true|false", 
            description:             "Include/omit new line at the end of a file");

        public static readonly ConfigOptionDescriptor NewLineBeforeWhileInDoStatement = new(
            key:                     ConfigOptionKeys.NewLineBeforeWhileInDoStatement, 
            defaultValue:            null, 
            defaultValuePlaceholder: "true|false", 
            description:             "Include/omit new line before 'while' in 'do' statement");

        public static readonly ConfigOptionDescriptor NullCheckStyle = new(
            key:                     ConfigOptionKeys.NullCheckStyle, 
            defaultValue:            null, 
            defaultValuePlaceholder: "equality_operator|pattern_matching", 
            description:             "Use equality operator or pattern matchding as a null check");

        public static readonly ConfigOptionDescriptor ObjectCreationParenthesesStyle = new(
            key:                     ConfigOptionKeys.ObjectCreationParenthesesStyle, 
            defaultValue:            null, 
            defaultValuePlaceholder: "include|omit", 
            description:             "Include/omit parentheses when creating new object");

        public static readonly ConfigOptionDescriptor ObjectCreationTypeStyle = new(
            key:                     ConfigOptionKeys.ObjectCreationTypeStyle, 
            defaultValue:            null, 
            defaultValuePlaceholder: "explicit|implicit|implicit_when_type_is_obvious", 
            description:             "Prefer explicit/implicit object creation");

        public static readonly ConfigOptionDescriptor PreferBlockBodyWhenDeclarationSpansOverMultipleLines = new(
            key:                     ConfigOptionKeys.PreferBlockBodyWhenDeclarationSpansOverMultipleLines, 
            defaultValue:            null, 
            defaultValuePlaceholder: "true|false", 
            description:             "Prefer block body when declaration spans over multiple lines");

        public static readonly ConfigOptionDescriptor PreferBlockBodyWhenExpressionSpansOverMultipleLines = new(
            key:                     ConfigOptionKeys.PreferBlockBodyWhenExpressionSpansOverMultipleLines, 
            defaultValue:            null, 
            defaultValuePlaceholder: "true|false", 
            description:             "Prefer block body when expression spans over multiple lines");

        public static readonly ConfigOptionDescriptor PrefixFieldIdentifierWithUnderscore = new(
            key:                     ConfigOptionKeys.PrefixFieldIdentifierWithUnderscore, 
            defaultValue:            null, 
            defaultValuePlaceholder: "true|false", 
            description:             "Prefix field identifier with underscore");

        public static readonly ConfigOptionDescriptor SuppressUnityScriptMethods = new(
            key:                     ConfigOptionKeys.SuppressUnityScriptMethods, 
            defaultValue:            null, 
            defaultValuePlaceholder: "true|false", 
            description:             "Suppress Unity script methods");

        public static readonly ConfigOptionDescriptor UseVarInsteadOfImplicitObjectCreation = new(
            key:                     ConfigOptionKeys.UseVarInsteadOfImplicitObjectCreation, 
            defaultValue:            null, 
            defaultValuePlaceholder: "true|false", 
            description:             "Use 'var' instead of implicit object creation");

        private static IEnumerable<KeyValuePair<string, string>> GetRequiredOptions()
        {
            yield return new KeyValuePair<string, string>("RCS0011", ConfigOptionKeys.BlankLineBetweenSingleLineAccessors);
            yield return new KeyValuePair<string, string>("RCS0015", ConfigOptionKeys.BlankLineBetweenUsingDirectiveGroups);
            yield return new KeyValuePair<string, string>("RCS0027", ConfigOptionKeys.BinaryOperatorNewLine);
            yield return new KeyValuePair<string, string>("RCS0028", ConfigOptionKeys.ConditionalOperatorNewLine);
            yield return new KeyValuePair<string, string>("RCS0032", ConfigOptionKeys.ArrowTokenNewLine);
            yield return new KeyValuePair<string, string>("RCS0051", ConfigOptionKeys.NewLineBeforeWhileInDoStatement);
            yield return new KeyValuePair<string, string>("RCS0052", ConfigOptionKeys.EqualsTokenNewLine);
            yield return new KeyValuePair<string, string>("RCS0058", ConfigOptionKeys.NewLineAtEndOfFile);
            yield return new KeyValuePair<string, string>("RCS1014", ConfigOptionKeys.ArrayCreationTypeStyle);
            yield return new KeyValuePair<string, string>("RCS1016", ConfigOptionKeys.BodyStyle);
            yield return new KeyValuePair<string, string>("RCS1018", ConfigOptionKeys.AccessibilityModifiers);
            yield return new KeyValuePair<string, string>("RCS1050", ConfigOptionKeys.ObjectCreationParenthesesStyle);
            yield return new KeyValuePair<string, string>("RCS1051", ConfigOptionKeys.ConditionInConditionalOperatorParenthesesStyle);
            yield return new KeyValuePair<string, string>("RCS1078", ConfigOptionKeys.EmptyStringStyle);
            yield return new KeyValuePair<string, string>("RCS1090", ConfigOptionKeys.ConfigureAwait);
            yield return new KeyValuePair<string, string>("RCS1096", ConfigOptionKeys.EnumHasFlagStyle);
            yield return new KeyValuePair<string, string>("RCS1207", ConfigOptionKeys.AnonymousFunctionOrMethodGroup);
            yield return new KeyValuePair<string, string>("RCS1248", ConfigOptionKeys.NullCheckStyle);
            yield return new KeyValuePair<string, string>("RCS1250", ConfigOptionKeys.ObjectCreationTypeStyle);
        }
    }
}