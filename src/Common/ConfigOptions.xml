<?xml version="1.0" encoding="utf-8"?>
<Options>
  <Option Id="AccessibilityModifiers">
	<ValuePlaceholder>explicit|implicit</ValuePlaceholder>
	<Description>Prefer explicit/implicit accessibility modifiers</Description>
  </Option>
  <Option Id="AccessorBracesStyle">
	<DefaultValue>multi_line</DefaultValue>
	<ValuePlaceholder>multi_line|single_line_when_expression_is_on_single_line</ValuePlaceholder>
	<Description>Format accessor's braces on single line or multiple lines</Description>
  </Option>
  <Option Id="ArrayCreationTypeStyle">
	<ValuePlaceholder>explicit|implicit|implicit_when_type_is_obvious</ValuePlaceholder>
	<Description>Prefer explicitly/implicitly typed array</Description>
  </Option>
  <Option Id="ArrowTokenNewLine">
	<ValuePlaceholder>after|before</ValuePlaceholder>
	<Description>Place new line after/before arrow token</Description>
  </Option>
  <Option Id="BinaryOperatorNewLine">
	<ValuePlaceholder>after|before</ValuePlaceholder>
	<Description>Place new line after/before binary operator</Description>
  </Option>
  <Option Id="BlankLineBetweenClosingBraceAndSwitchSection">
	<ValuePlaceholder>true|false</ValuePlaceholder>
	<Description>Add/remove blank line between closing brace and switch section</Description>
  </Option>
  <Option Id="BlankLineBetweenSingleLineAccessors">
	<ValuePlaceholder>true|false</ValuePlaceholder>
	<Description>Add/remove blank line between single-line accessors</Description>
  </Option>
  <Option Id="BlankLineBetweenUsingDirectives">
	<ValuePlaceholder>never|separate_groups</ValuePlaceholder>
	<Description>Add/remove blank line between using directives</Description>
  </Option>
  <Option Id="BlockBracesStyle">
	<DefaultValue>multi_line</DefaultValue>
	<ValuePlaceholder>multi_line|single_line_when_empty</ValuePlaceholder>
	<Description>Format block's braces on single line or multiple lines</Description>
  </Option>
  <Option Id="BodyStyle">
	<ValuePlaceholder>block|expression</ValuePlaceholder>
	<Description>Prefer block body or expression body</Description>
  </Option>
  <Option Id="ConditionalOperatorConditionParenthesesStyle">
	<ValuePlaceholder>include|omit|omit_when_condition_is_single_token</ValuePlaceholder>
	<Description>Add/remove parentheses to/from condition in conditional operator</Description>
  </Option>
  <Option Id="ConditionalOperatorNewLine">
	<ValuePlaceholder>after|before</ValuePlaceholder>
	<Description>Place new line after/before '?:' operator</Description>
  </Option>
  <Option Id="ConfigureAwait">
	<ValuePlaceholder>true|false</ValuePlaceholder>
	<Description>Add/remove 'ConfigureAwait(false)' call</Description>
  </Option>
  <Option Id="EmptyStringStyle">
	<ValuePlaceholder>field|literal</ValuePlaceholder>
	<Description>Prefer 'string.Empty' or empty string literal</Description>
  </Option>
  <Option Id="EnumHasFlagStyle">
	<ValuePlaceholder>method|operator</ValuePlaceholder>
	<Description>Use 'HasFlag' method or bitwise operator</Description>
  </Option>
  <Option Id="EqualsTokenNewLine">
	<ValuePlaceholder>after|before</ValuePlaceholder>
	<Description>Place new line after/before equals sign</Description>
  </Option>
  <Option Id="MaxLineLength">
    <DefaultValue>140</DefaultValue>
    <ValuePlaceholder>&lt;NUM&gt;</ValuePlaceholder>
    <Description>Max line length</Description>
  </Option>
  <Option Id="NewLineAtEndOfFile">
    <ValuePlaceholder>true|false</ValuePlaceholder>
    <Description>Include/omit new line at the end of a file</Description>
  </Option>
  <Option Id="NewLineBeforeWhileInDoStatement">
	<ValuePlaceholder>true|false</ValuePlaceholder>
	<Description>Include/omit new line before 'while' in 'do' statement</Description>
  </Option>
  <Option Id="NullCheckStyle">
	<ValuePlaceholder>equality_operator|pattern_matching</ValuePlaceholder>
	<Description>Use equality operator or pattern matchding as a null check</Description>
  </Option>
  <Option Id="NullConditionalOperatorNewLine">
	<ValuePlaceholder>after|before</ValuePlaceholder>
	<Description>Place new line after/before null-conditional operator</Description>
  </Option>
  <Option Id="ObjectCreationParenthesesStyle">
	<ValuePlaceholder>include|omit</ValuePlaceholder>
	<Description>Include/omit parentheses when creating new object</Description>
  </Option>
  <Option Id="ObjectCreationTypeStyle">
	<ValuePlaceholder>explicit|implicit|implicit_when_type_is_obvious</ValuePlaceholder>
	<Description>Prefer explicit/implicit object creation</Description>
  </Option>
  <Option Id="PrefixFieldIdentifierWithUnderscore">
    <ValuePlaceholder>true|false</ValuePlaceholder>
    <Description>Prefix field identifier with underscore</Description>
  </Option>
  <Option Id="SuppressUnityScriptMethods">
	<ValuePlaceholder>true|false</ValuePlaceholder>
	<Description>Suppress Unity script methods</Description>
  </Option>
  <Option Id="UseAnonymousFunctionOrMethodGroup">
	<ValuePlaceholder>anonymous_function|method_group</ValuePlaceholder>
	<Description>Use anonymous function or method group</Description>
  </Option>
  <Option Id="UseBlockBodyWhenDeclarationSpansOverMultipleLines">
	<ValuePlaceholder>true|false</ValuePlaceholder>
	<Description>Use block body when declaration spans over multiple lines</Description>
  </Option>
  <Option Id="UseBlockBodyWhenExpressionSpansOverMultipleLines">
	<ValuePlaceholder>true|false</ValuePlaceholder>
	<Description>Use block body when expression spans over multiple lines</Description>
  </Option>
  <Option Id="UseVarInsteadOfImplicitObjectCreation">
	<ValuePlaceholder>true|false</ValuePlaceholder>
	<Description>Use 'var' instead of implicit object creation</Description>
  </Option>
  <!--
  <Option Id="">
    <Key></Key>
    <DefaultValue></DefaultValue>
    <ValuePlaceholder></ValuePlaceholder>
    <Description></Description>
  </Option>
  -->
</Options>